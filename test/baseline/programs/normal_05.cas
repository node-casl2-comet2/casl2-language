CASL        START   
            LAD     GR6, 0
            LAD     GR7, LIBBUF
            LAD     GR5, GVAR
            LD      GR3, =20
            ST      GR3, B8B965AD
            LD      GR3, =35
            LD      GR4, =1
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =68
            LD      GR4, =2
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =94
            LD      GR4, =3
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =7
            LD      GR4, =4
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =88
            LD      GR4, =5
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =5
            XOR     GR3, =#FFFF
            ADDA    GR3, =1
            LD      GR4, =6
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =3
            XOR     GR3, =#FFFF
            ADDA    GR3, =1
            LD      GR4, =7
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =12
            LD      GR4, =8
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =35
            LD      GR4, =9
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =9
            LD      GR4, =10
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =6
            XOR     GR3, =#FFFF
            ADDA    GR3, =1
            LD      GR4, =11
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =3
            LD      GR4, =12
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =0
            LD      GR4, =13
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =2
            XOR     GR3, =#FFFF
            ADDA    GR3, =1
            LD      GR4, =14
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =74
            LD      GR4, =15
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =88
            LD      GR4, =16
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =52
            LD      GR4, =17
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =43
            LD      GR4, =18
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =5
            LD      GR4, =19
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR3, =4
            LD      GR4, =20
            LAD     GR0, 1
            SUBA    GR4, GR0
            ST      GR3, CC175B9C, GR4
            LD      GR4, =1
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR3, CC175B9C, GR4
            ST      GR3, D8BD79CC
            LD      GR3, D8BD79CC
            ST      GR3, FFE4E773
            LD      GR3, =2
            ST      GR3, C0C0B4AB
LEVY5       LD      GR1, C0C0B4AB
            PUSH    0, GR1
            LD      GR2, B8B965AD
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JPL     IQVR0
            JZE     IQVR0
            LAD     GR1, 1
            JUMP    IQVR0END
IQVR0       LAD     GR1, 0
IQVR0END    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     LEVY5END
            LD      GR4, C0C0B4AB
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR3, CC175B9C, GR4
            ST      GR3, B774EFFE
            LD      GR1, C0C0B4AB
            PUSH    0, GR1
            LD      GR2, =1
            POP     GR1
            ADDA    GR1, GR2
            LD      GR4, GR1
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR3, CC175B9C, GR4
            ST      GR3, E3669D19
            LD      GR1, B774EFFE
            PUSH    0, GR1
            LD      GR2, E3669D19
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JMI     IW0T6
            JZE     IW0T6
            LAD     GR1, 1
            JUMP    IW0T6END
IW0T6       LAD     GR1, 0
IW0T6END    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     KG330
IG330       LD      GR1, B774EFFE
            PUSH    0, GR1
            LD      GR2, FFE4E773
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JMI     I82HY
            JZE     I82HY
            LAD     GR1, 1
            JUMP    I82HYEND
I82HY       LAD     GR1, 0
I82HYEND    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     IF15NEND
IF15N       LD      GR3, B774EFFE
            ST      GR3, FFE4E773
IF15NEND    NOP     
            LD      GR1, E3669D19
            PUSH    0, GR1
            LD      GR2, D8BD79CC
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JPL     I0DM3
            JZE     I0DM3
            LAD     GR1, 1
            JUMP    I0DM3END
I0DM3       LAD     GR1, 0
I0DM3END    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     IQEBNEND
IQEBN       LD      GR3, E3669D19
            ST      GR3, D8BD79CC
IQEBNEND    NOP     
            JUMP    IG330END
KG330       LD      GR1, E3669D19
            PUSH    0, GR1
            LD      GR2, FFE4E773
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JMI     IHZAG
            JZE     IHZAG
            LAD     GR1, 1
            JUMP    IHZAGEND
IHZAG       LAD     GR1, 0
IHZAGEND    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     IYCGBEND
IYCGB       LD      GR3, E3669D19
            ST      GR3, FFE4E773
IYCGBEND    NOP     
            LD      GR1, B774EFFE
            PUSH    0, GR1
            LD      GR2, D8BD79CC
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JPL     IN6Q6
            JZE     IN6Q6
            LAD     GR1, 1
            JUMP    IN6Q6END
IN6Q6       LAD     GR1, 0
IN6Q6END    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     INGT7END
INGT7       LD      GR3, B774EFFE
            ST      GR3, D8BD79CC
INGT7END    NOP     
IG330END    NOP     
            LD      GR1, C0C0B4AB
            PUSH    0, GR1
            LD      GR2, =2
            POP     GR1
            ADDA    GR1, GR2
            LD      GR3, GR1
            ST      GR3, C0C0B4AB
            JUMP    LEVY5
LEVY5END    NOP     
            LD      GR1, C0C0B4AB
            PUSH    0, GR1
            LD      GR2, B8B965AD
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JPL     ISJ3N
            JMI     ISJ3N
            LAD     GR1, 1
            JUMP    ISJ3NEND
ISJ3N       LAD     GR1, 0
ISJ3NEND    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     I0NZGEND
I0NZG       LD      GR4, B8B965AD
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR1, CC175B9C, GR4
            PUSH    0, GR1
            LD      GR2, FFE4E773
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JMI     IFOWU
            JZE     IFOWU
            LAD     GR1, 1
            JUMP    IFOWUEND
IFOWU       LAD     GR1, 0
IFOWUEND    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     K5OBX
I5OBX       LD      GR4, B8B965AD
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR3, CC175B9C, GR4
            ST      GR3, FFE4E773
            JUMP    I5OBXEND
K5OBX       LD      GR4, B8B965AD
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR1, CC175B9C, GR4
            PUSH    0, GR1
            LD      GR2, D8BD79CC
            POP     GR1
            SUBA    GR1, GR2
            LAD     GR2, 0
            CPA     GR1, GR2
            JPL     I4F9J
            JZE     I4F9J
            LAD     GR1, 1
            JUMP    I4F9JEND
I4F9J       LAD     GR1, 0
I4F9JEND    LD      GR1, GR1
            LAD     GR2, 0
            CPA     GR1, GR2
            JZE     IW46GEND
IW46G       LD      GR4, B8B965AD
            LAD     GR0, 1
            SUBA    GR4, GR0
            LD      GR3, CC175B9C, GR4
            ST      GR3, D8BD79CC
IW46GEND    NOP     
I5OBXEND    NOP     
            LAD     GR2, ='MAX = '
            LAD     GR1, 6
            CALL    WRTSTR
            LD      GR2, FFE4E773
            CALL    WRTINT
            LAD     GR2, =' , MIN = '
            LAD     GR1, 9
            CALL    WRTSTR
            LD      GR2, D8BD79CC
            CALL    WRTINT
            CALL    WRTLN
I0NZGEND    NOP     
            RET     
LIBBUF      DS      256
GVAR        NOP     
CC175B9C    DS      20
C0C0B4AB    DS      1
FFE4E773    DS      1
D8BD79CC    DS      1
B8B965AD    DS      1
B774EFFE    DS      1
E3669D19    DS      1
            END     
;====================
; MULT: 掛け算を行うサブルーチン
; GR1 * GR2 -> GR2
MULT        START
            PUSH    0, GR1 ; GR1 の内容をスタックに退避
            PUSH    0, GR3 ; GR3 の内容をスタックに退避
            PUSH    0, GR4 ; GR4 の内容をスタックに退避
            LAD     GR3, 0 ; GR3 を初期化
            LD      GR4, GR2
            JPL     LOOP
            XOR     GR4, =#FFFF
            ADDA    GR4, =1
LOOP        SRL     GR4, 1
            JOV     ONE
            JUMP    ZERO
ONE         ADDL    GR3, GR1
ZERO        SLL     GR1, 1
            AND     GR4, GR4
            JNZ     LOOP
            CPA     GR2, =0
            JPL     END
            XOR     GR3, =#FFFF
            ADDA    GR3, =1
END         LD      GR2,GR3
            POP     GR4
            POP     GR3
            POP     GR1
            RET
            END
;====================
; DIV 割り算を行うサブルーチン
; GR1 / GR2 -> 商は GR2, 余りは GR1
DIV         START
            PUSH    0, GR3
            ST      GR1, A
            ST      GR2, B
            CPA     GR1, =0
            JPL     SKIPA
            XOR     GR1, =#FFFF
            ADDA    GR1, =1
SKIPA       CPA     GR2, =0
            JZE     SKIPD
            JPL     SKIPB
            XOR     GR2, =#FFFF
            ADDA    GR2, =1
SKIPB       LD      GR3, =0
LOOP        CPA     GR1, GR2
            JMI     STEP
            SUBA    GR1, GR2
            LAD     GR3, 1, GR3
            JUMP    LOOP
STEP        LD      GR2, GR3
            LD      GR3, A
            CPA     GR3, =0
            JPL     SKIPC
            XOR     GR1, =#FFFF
            ADDA    GR1, =1
SKIPC       XOR     GR3, B
            CPA     GR3, =0
            JZE     SKIPD
            JPL     SKIPD
            XOR     GR2, =#FFFF
            ADDA    GR2, =1
SKIPD       POP     GR3
            RET
A           DS    1
B           DS    1
            END
;====================
; 入力装置から数値データを読み込み，
; その内容を GR2 が指すアドレスに格納するサブルーチン
RDINT       START
            PUSH    0, GR1 ; GR1 の内容をスタックに退避
            PUSH    0, GR3 ; GR3 の内容をスタックに退避
            PUSH    0, GR4 ; GR4 の内容をスタックに退避
            PUSH    0, GR5 ; GR5 の内容をスタックに退避
            PUSH    0, GR6 ; GR6 の内容をスタックに退避
            LD      GR5, GR2 ; GR2 が指す番地を GR5 にコピー
            LD      GR2, =0 ; GR2 を初期化
            LD      GR3, =0 ; GR3 を初期化
            IN      INAREA, INLEN ; 入力を受け取る
            ; 入力がnullかどうかのチェック
            CPA     GR3, INLEN
            JZE     ERROR
            ; 最初の文字が'-'かどうかのチェック
            LD      GR4,INAREA,GR3
            LAD     GR3,1,GR3
            LD      GR6,GR4 ; GR6 に入力された先頭の文字を保存
            CPL     GR4,=#002D ; '-'かどうか
            JZE     LOOP
            CPL     GR4,='0' ; 数値かどうかのチェック
            JMI     ERROR
            CPL     GR4,='9' 
            JPL     ERROR
            XOR     GR4,=#0030 ; 数値だったら変換
            ADDA    GR2,GR4
            ; 「すでに読み込んだ数値を10倍して，
            ; 新しく読み込んだ数値と足す．」を繰り返す
LOOP        CPA     GR3, INLEN
            JZE     CODE ; 入力された文字数とGR3が同じであればループを抜ける
            LD      GR1, =10
            CALL    MULT ; GR2 の値を10倍する
            LD      GR4, INAREA, GR3
            CPL     GR4, ='0' ; 数値かどうかのチェック
            JMI     ERROR
            CPL     GR4, ='9' 
            JPL     ERROR
            XOR     GR4, =#0030 ; GR4 の内容を数値に変換
            ADDA    GR2, GR4 ; GR2 に GR1 の内容を足す
            LAD     GR3, 1, GR3; GR3 (ポインタ)をインクリメント
            JUMP    LOOP
            ; 最初の文字が '-'であった場合は，-1倍する
CODE        CPL     GR6, =#002D
            JNZ     END
            XOR     GR2, =#FFFF
            LAD     GR2, 1, GR2
            JUMP    END
            ; エラーを出力する
ERROR       OUT     ERRSTR, ERRLEN
END         ST      GR2, 0, GR5 ; GR2 の内容を GR5 が指す番地に格納する
            LD      GR2, GR5 ; GR5 が指す番地を GR2 に戻す
            POP     GR6
            POP     GR5
            POP     GR4
            POP     GR3
            POP     GR1
            RET
ERRSTR      DC      'illegal input'
ERRLEN      DC      13
INAREA      DS      6
INLEN       DS      1
            END
;====================
; 入力装置から文字を読み込み，
; その内容を GR2 が指すアドレスに格納するサブルーチン
RDCH        START
            IN      INCHAR, INLEN
            LD      GR1, INCHAR
            ST      GR1, 0, GR2
            RET
INCHAR      DS      1
INLEN       DS      1
            END
;====================
; 入力装置から，GR1の文字数を読み込む．
; 読み込んだ文字列は，GR2 が指すアドレスから順に格納される
RDSTR       START
            PUSH    0, GR3 ; GR3 の内容をスタックに退避
            PUSH    0, GR4 ; GR4 の内容をスタックに退避
            PUSH    0, GR5 ; GR5 の内容をスタックに退避
            LAD     GR4, 0 ; GR4 を初期化
            IN      INSTR, INLEN
LOOP        CPA     GR4, GR1
            JZE     END ; GR1で指定された文字数を超えたら終わり
            CPA     GR4, INLEN
            JZE     END ; 入力された文字数を超えたら終わり
            LD      GR5, GR2
            ADDA    GR5, GR4 ; 文字の格納先番地を計算
            LD      GR3, INSTR, GR4
            ST      GR3, 0, GR5
            LAD     GR4, 1, GR4
            JUMP    LOOP
END         POP     GR5
            POP     GR4
            POP     GR3
            RET
INSTR       DS      256
INLEN       DS      1
            END
;====================
; 入力装置からの文字列を改行まで読み飛ばすサブルーチン
RDLN        START
            IN      INAREA, INLEN
            RET
INAREA      DS      256
INLEN       DS      1
            END
;====================
; GR2 の内容（数値データ）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTINT      START
            PUSH    0, GR1 ; GR1の内容をスタックに退避
            PUSH    0, GR2 ; GR2の内容をスタックに退避
            PUSH    0, GR3 ; GR3の内容をスタックに退避
            PUSH    0, GR2 ; 数値データをもう一度スタックに退避
            LD      GR3, =0 ; GR3 はインデックスとして用いる
            ; 数値データが負数である場合は，正の数に変換
            CPA     GR2, =0
            JPL     LOOP1
            XOR     GR2, =#FFFF
            ADDA    GR2, =1
            ; 数値データを変換しながら，バッファに格納
LOOP1       LD      GR1, GR2
            LD      GR2, =10
            CALL    DIV
            XOR     GR1, =#0030
            ST      GR1,BUFFER,GR3
            LAD     GR3, 1, GR3
            CPA     GR2, =0
            JNZ     LOOP1
            ; 数値データが負数であれば，'-'を追加
            POP     GR2
            CPA     GR2, =0
            JZE     LOOP2
            JPL     LOOP2
            LD      GR1, ='-'
            ST      GR1, BUFFER, GR3
            LAD     GR3, 1, GR3
            ; BUFFER を逆順にたどりながら，出力用バッファに格納
LOOP2       LAD     GR3, -1, GR3
            LD      GR1, BUFFER, GR3
            LD      GR2, GR7
            ADDA    GR2, GR6
            ST      GR1, 0, GR2
            LAD     GR6, 1, GR6
            CPA     GR3, =0
            JNZ     LOOP2
END         POP     GR3
            POP     GR2
            POP     GR1
            RET
BUFFER      DS      6    
            END
;====================
; GR2 の内容（文字）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTCH       START
            PUSH    0, GR1 ; GR1 の内容をスタックに退避
            LD      GR1, GR7
            ADDA    GR1, GR6 ; GR1 に次の文字を格納する番地を代入
            ST      GR2, 0, GR1
            LAD     GR6, 1, GR6
            POP     GR1
            RET
            END
;====================
; GR2 の指すメモリ番地から，長さ GR1 の文字列を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTSTR      START
            PUSH    0, GR3 ; GR3 の内容をスタックに退避
            PUSH    0, GR4 ; GR4 の内容をスタックに退避
            PUSH    0, GR5 ; GR5 の内容をスタックに退避
            LAD     GR3, 0 ; GR3 は制御変数として用いる
LOOP        CPA     GR3, GR1
            JZE     END
            LD      GR4, GR2
            ADDA    GR4, GR3 ; 出力する文字の格納番地を計算
            LD      GR5, 0, GR4 ; 出力する文字をレジスタにコピー
            LD      GR4, GR7
            ADDA    GR4, GR6 ; 出力先の番地を計算
            ST      GR5, 0, GR4 ; 出力装置に書き出し
            LAD     GR3, 1, GR3
            LAD     GR6, 1, GR6
            JUMP    LOOP
END         POP     GR5
            POP     GR4
            POP     GR3
            RET
            END
;====================
; 改行を出力装置に書き出すサブルーチン
; 実質的には，GR7で始まるアドレス番地から長さGR6の文字列を出力する
WRTLN       START
            PUSH    0, GR1
            PUSH    0, GR2
            PUSH    0, GR3
            ST      GR6, OUTLEN
            LAD     GR1, 0
LOOP        CPA     GR1, OUTLEN
            JZE     END
            LD      GR2, GR7
            ADDA    GR2, GR1
            LD      GR3, 0, GR2
            ST      GR3, OUTSTR, GR1
            LAD     GR1, 1, GR1
            JUMP    LOOP    
END         OUT     OUTSTR, OUTLEN
            LAD     GR6, 0 ; 文字列を出力して，GR6 を初期化
            POP     GR3
            POP     GR2
            POP     GR1
            RET
OUTSTR      DS      256
OUTLEN      DS      1
            END
